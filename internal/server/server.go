package server

import (
	"context"

	api "github.com/kartpop/dclog/api/v1"
	"google.golang.org/grpc"
)

// Config wraps the interface implemented by the log data structure
type Config struct {
	CommitLog CommitLog
}

// CommitLog is the interface implemented by the log data structure
type CommitLog interface {
	Append(*api.Record) (uint64, error)
	Read(uint64) (*api.Record, error)
}

var _ api.LogServer = (*grpcServer)(nil) // TODO: understand why blank identifier is created by type conversion of nil

func NewGRPCServer(config *Config, opts ...grpc.ServerOption) (*grpc.Server, error) {
	gsrv := grpc.NewServer(opts...)
	srv, err := newgrpcServer(config)
	if err != nil {
		return nil, err
	}
	api.RegisterLogServer(gsrv, srv)
	return gsrv, nil
}

// grpcServer implements the LogServer interface autogenerated by grpc.
// It is a thin layer as it defers most of the work to the internal log library.
type grpcServer struct {
	api.UnimplementedLogServer
	*Config
}

// newgrpcServer is the factory method returning the grpcServer instance
func newgrpcServer(config *Config) (srv *grpcServer, err error) {
	srv = &grpcServer{
		Config: config,
	}
	return srv, nil
}

// Produce appends a record to the log and returns the offset for the record.
// The ProduceRequest parameter wraps the record to be appended, while the ProduceResponse which is returned wraps the offset.
func (g *grpcServer) Produce(ctx context.Context, req *api.ProduceRequest) (*api.ProduceResponse, error) {
	off, err := g.CommitLog.Append(req.Record)
	if err != nil {
		return nil, err
	}
	return &api.ProduceResponse{Offset: off}, nil
}

// Consume reads a record from the log given an offset.
// The ConsumeRequest paramter wraps the requested offset, while the ConsumeResponse which is returned wraps the record.
func (g *grpcServer) Consume(ctx context.Context, req *api.ConsumeRequest) (*api.ConsumeResponse, error) {
	record, err := g.CommitLog.Read(req.Offset)
	if err != nil {
		return nil, err
	}
	return &api.ConsumeResponse{Record: record}, nil
}

// ProduceStream is a bidirectional streaming service. Client can stream Produce requests while the server can
// send back responses indicating whether each request succeeded.
func (g *grpcServer) ProduceStream(stream api.Log_ProduceStreamServer) error {
	for {
		req, err := stream.Recv()
		if err != nil {
			return err
		}
		res, err := g.Produce(stream.Context(), req)
		if err != nil {
			return err
		}
		if err = stream.Send(res); err != nil {
			return err
		}
	}
}

// ConsumeStream is a server side streaming service. Client can indicate the offset from which it wants to read records,
// while the server streams the records starting at the given offset. When the end of the log is reached, server waits
// till the next record comes in and then continues streaming.
func (g *grpcServer) ConsumeStream(req *api.ConsumeRequest, stream api.Log_ConsumeStreamServer) error {
	for {
		select {
		case <-stream.Context().Done():
			return nil
		default:
			res, err := g.Consume(stream.Context(), req)
			switch err.(type) {
			case nil:
			case api.ErrorOffsetOutOfRange:
				continue
			default:
				return err
			}
			if err = stream.Send(res); err != nil {
				return err
			}
			req.Offset++
		}
	}
}
